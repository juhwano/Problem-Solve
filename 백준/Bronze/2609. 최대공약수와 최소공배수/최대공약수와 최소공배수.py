# 공배수 = 2개 이상의 자연수의 공통된 배수
# 최소공배수 = 공배수 중 가장 작은 공배수

# 공약수 = 2개 이상의 자연수의 공통된 약수
# 최대공약수 = 공약수 중 가장 큰 공약수
# 서로소 = 공약수가 1뿐인 2개 이상의 자연수, 최대공약수가 1

# 유클리드 호제법(-互除法, Euclidean algorithm) 또는 유클리드 알고리즘은
# 2개의 자연수 또는 정식(整式)의 최대공약수를 구하는 알고리즘의 하나이다.

# 유클리드 호제법은 두 수 중 큰 수(a)를 작은 수(b)로 나눈 나머지를 구하고,
# 이 나머지와 작은 수의 최대공약수가 원래 두 수의 최대공약수와 같다는 원리를 이용합니다.

n, m = map(int, input().split())  # 두 수를 입력받습니다.
a, b = max(n, m), min(n, m)  # 두 수 중 큰 수를 a에, 작은 수를 b에 저장합니다.

# 유클리드 호제법
while (b != 0):  # b가 0이 아닐 동안 반복합니다.
    a, b = b, a % b  # a를 b로 나눈 나머지를 a에 저장하고, a와 b의 값을 서로 바꿉니다.

gcd = a  # 최대공약수 저장
lcm = n * m // gcd  # 최소공배수 계산

print(gcd)  # 최대공약수 출력
print(lcm)  # 최소공배수 출력
